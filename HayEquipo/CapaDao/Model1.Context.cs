//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CapaEntidades
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class HayEquipoEntities : DbContext
    {
        public HayEquipoEntities()
            : base("name=HayEquipoEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Administrador> Administrador { get; set; }
        public virtual DbSet<AmigosPorDeportistas> AmigosPorDeportistas { get; set; }
        public virtual DbSet<Barrio> Barrio { get; set; }
        public virtual DbSet<Cancha> Cancha { get; set; }
        public virtual DbSet<CanchasPorComplejos> CanchasPorComplejos { get; set; }
        public virtual DbSet<CanchasPorHorarios> CanchasPorHorarios { get; set; }
        public virtual DbSet<ComplejoDeportivo> ComplejoDeportivo { get; set; }
        public virtual DbSet<Deporte> Deporte { get; set; }
        public virtual DbSet<DeportesPorDeportistas> DeportesPorDeportistas { get; set; }
        public virtual DbSet<Deportista> Deportista { get; set; }
        public virtual DbSet<DeportistasPorEquipos> DeportistasPorEquipos { get; set; }
        public virtual DbSet<DetalleValoracionComplejo> DetalleValoracionComplejo { get; set; }
        public virtual DbSet<DetalleValoracionDeportista> DetalleValoracionDeportista { get; set; }
        public virtual DbSet<EncuentroDeportivo> EncuentroDeportivo { get; set; }
        public virtual DbSet<Equipo> Equipo { get; set; }
        public virtual DbSet<Estado> Estado { get; set; }
        public virtual DbSet<Horario> Horario { get; set; }
        public virtual DbSet<InvitacionEncuentro> InvitacionEncuentro { get; set; }
        public virtual DbSet<Localidad> Localidad { get; set; }
        public virtual DbSet<Mensaje> Mensaje { get; set; }
        public virtual DbSet<Pais> Pais { get; set; }
        public virtual DbSet<Permiso> Permiso { get; set; }
        public virtual DbSet<PermisosPorRoles> PermisosPorRoles { get; set; }
        public virtual DbSet<Posicion> Posicion { get; set; }
        public virtual DbSet<PosicionesPorDeportistas> PosicionesPorDeportistas { get; set; }
        public virtual DbSet<Provincia> Provincia { get; set; }
        public virtual DbSet<Publicacion> Publicacion { get; set; }
        public virtual DbSet<Responsable> Responsable { get; set; }
        public virtual DbSet<Rol> Rol { get; set; }
        public virtual DbSet<RolesPorUsuarios> RolesPorUsuarios { get; set; }
        public virtual DbSet<Rubro> Rubro { get; set; }
        public virtual DbSet<ServicioExtra> ServicioExtra { get; set; }
        public virtual DbSet<ServiciosPorComplejos> ServiciosPorComplejos { get; set; }
        public virtual DbSet<Sesion> Sesion { get; set; }
        public virtual DbSet<Sponsor> Sponsor { get; set; }
        public virtual DbSet<TipoCancha> TipoCancha { get; set; }
        public virtual DbSet<TipoComplejo> TipoComplejo { get; set; }
        public virtual DbSet<TipoDeporte> TipoDeporte { get; set; }
        public virtual DbSet<TipoDocumento> TipoDocumento { get; set; }
        public virtual DbSet<TiposPorDeportes> TiposPorDeportes { get; set; }
        public virtual DbSet<TipoValoracionComplejo> TipoValoracionComplejo { get; set; }
        public virtual DbSet<TipoValoracionDeportista> TipoValoracionDeportista { get; set; }
        public virtual DbSet<Usuario> Usuario { get; set; }
        public virtual DbSet<ValoracionComplejo> ValoracionComplejo { get; set; }
        public virtual DbSet<ValoracionDeportista> ValoracionDeportista { get; set; }
        public virtual DbSet<Zona> Zona { get; set; }
        public virtual DbSet<ZonasPorDeportistas> ZonasPorDeportistas { get; set; }
    
        public virtual int spInsertComplejos(string nomb, string desc, Nullable<int> idTipoComp, string calle, Nullable<int> nroCalle, Nullable<int> idBarr, Nullable<int> nroTel, Nullable<int> idResp, Nullable<double> promEstr, Nullable<int> idEst)
        {
            var nombParameter = nomb != null ?
                new ObjectParameter("nomb", nomb) :
                new ObjectParameter("nomb", typeof(string));
    
            var descParameter = desc != null ?
                new ObjectParameter("desc", desc) :
                new ObjectParameter("desc", typeof(string));
    
            var idTipoCompParameter = idTipoComp.HasValue ?
                new ObjectParameter("idTipoComp", idTipoComp) :
                new ObjectParameter("idTipoComp", typeof(int));
    
            var calleParameter = calle != null ?
                new ObjectParameter("calle", calle) :
                new ObjectParameter("calle", typeof(string));
    
            var nroCalleParameter = nroCalle.HasValue ?
                new ObjectParameter("nroCalle", nroCalle) :
                new ObjectParameter("nroCalle", typeof(int));
    
            var idBarrParameter = idBarr.HasValue ?
                new ObjectParameter("idBarr", idBarr) :
                new ObjectParameter("idBarr", typeof(int));
    
            var nroTelParameter = nroTel.HasValue ?
                new ObjectParameter("nroTel", nroTel) :
                new ObjectParameter("nroTel", typeof(int));
    
            var idRespParameter = idResp.HasValue ?
                new ObjectParameter("idResp", idResp) :
                new ObjectParameter("idResp", typeof(int));
    
            var promEstrParameter = promEstr.HasValue ?
                new ObjectParameter("promEstr", promEstr) :
                new ObjectParameter("promEstr", typeof(double));
    
            var idEstParameter = idEst.HasValue ?
                new ObjectParameter("idEst", idEst) :
                new ObjectParameter("idEst", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertComplejos", nombParameter, descParameter, idTipoCompParameter, calleParameter, nroCalleParameter, idBarrParameter, nroTelParameter, idRespParameter, promEstrParameter, idEstParameter);
        }
    }
}
